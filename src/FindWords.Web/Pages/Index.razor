@page "/"
@using System.Linq;
@inject ISixLetterWordService SixLetter
@inject IWordTree WordTree
@inject IWordFinder WordFinder

@using Microsoft.AspNetCore.Components.Web

@* TODO: Need to add a list of possible words as well here *@

    <div id="maincontent">
        @foreach (var ch in CharViewModels)
        {
            <button class="charbtn btn btn-outline-primary btn-lg" btnwasclicked="@(ch.HasBeenClicked)"
                    disabled="@(ch.HasBeenClicked)"
                    @onclick="@(() => OnLetterClick(ch))">
                @ch.Character
                </button>
            }

        <div id="resultsContainer">
            <p class="currentGuess">@currentGuess @result</p>
            @*<p class="isWordResult">@result</p>*@
        </div>

        <div id="actionsContainer">
            <button class="actionbutton btn btn-outline-secondary" @onclick="OnSubmitClick">Submit</button>
            <button class="actionbutton btn btn-outline-secondary" @onclick="OnClearClick">Erase</button>
            <button class="actionbutton btn btn-outline-secondary" @onclick="OnShuffleClick">Mix letters</button>
        </div>

        <div id="navContainer">
            <button class="navbutton btn btn-outline-primary" @onclick="OnPreviousClick">◀</button>
            <button class="navbutton btn btn-outline-primary" @onclick="OnNextClick">▶</button>
            <a href="#" @onclick="OnShowRemainingClick">Show remaining words</a>
        </div>

        <p>Words remaining: @(PossibleWords.Count - FoundWords.Count)</p>

        <div class="wordsContainer">
            <div class="column">
                <h3>found words</h3>
                <ul id="foundwordscontainer">
                    @foreach (string word in FoundWords)
                    {
                        <li>@word</li>
                    }
                </ul>
            </div>
            <div class="column" hidden="@(!showRemainingWords)">
                <h3>remaining words</h3>
                <ul id="remainingwordscontainer">
                    @foreach(string word in GetRemainingWords()) {
                        <li>@word</li>
                    }
                </ul>
            </div>
        </div>

        
    </div>

@code {
    string currentGuess;
    string result;
    List<CharacterViewModel> CharViewModels = new List<CharacterViewModel>();
    List<string> FoundWords = new List<string>();
    List<string> PossibleWords = new List<string>();
    // mostly for testing, doesn't really need a user option
    bool randomizeWordList = true;
    bool showRemainingWords = false;

    private string _word;
    public string Word {
        get { return _word; }
        set {
            _word = value;
            currentGuess = string.Empty;
            UpdateCharsFromWord();
            UpdatePossibleWords();
        }
    }
    protected void UpdateCharsFromWord() {
        CharViewModels.Clear();
        if (string.IsNullOrEmpty(Word)) { return; }

        foreach(char c in Word.ToCharArray()) {
            var cvm = new CharacterViewModel() {
                Character = c,
                HasBeenClicked = false
            };
            CharViewModels.Add(cvm);
        }
    }
    protected void UpdatePossibleWords() {
        PossibleWords = WordFinder.FindWordsInString(Word);
    }
    protected List<string> GetRemainingWords() {
        List<string> allwords = new List<string>();
        allwords.AddRange(PossibleWords);
        allwords.RemoveAll((word) => FoundWords.Contains(word));
        return allwords;
    }
    protected override void OnInitialized() {
        SixLetter.Randomize = randomizeWordList;
        Word = SixLetter.GetNextWord().Shuffle();
    }

    public void OnShowRemainingClick() {
        showRemainingWords = !showRemainingWords;
    }
    public void OnNextClick() {
        Word = SixLetter.GetNextWord().Shuffle();
        FoundWords = new List<string>();
        UpdatePossibleWords();
    }
    public void OnPreviousClick() {
        Word = SixLetter.GetPreviousWord().Shuffle();
        FoundWords = new List<string>();
        UpdatePossibleWords();
    }

    public void OnLetterClick(CharacterViewModel chvm) {
        currentGuess += chvm.Character;
        chvm.HasBeenClicked = true;
        if (!WordTree.IsWord(currentGuess)) {
            result = string.Empty;
        }

        StateHasChanged();
    }

    public void OnClearClick() {
        currentGuess = string.Empty;
        result = string.Empty;
        UpdateCharsFromWord();
    }
    public void OnShuffleClick() {
        CharViewModels = CharViewModels.Randomize().ToList();
    }
    public void OnSubmitClick() {
        result = string.Empty;
        if (WordTree.IsWord(currentGuess)) {
            if (!FoundWords.Contains(currentGuess)) {
                FoundWords.Add(currentGuess);
                result = "✓";
            }
            else {
                result = "Word already added";
            }
        }
        else {
            result = "Not a word";
        }
        CharViewModels.ForEach((ch) => ch.HasBeenClicked = false);
        currentGuess = string.Empty;
        StateHasChanged();
    }
}
